{"ast":null,"code":"import _objectSpread from\"C:/Users/belen/bootcamp/projects/live-chat/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from'react';import{Widget,addResponseMessage}from'react-chat-widget';import'react-chat-widget/lib/styles.css';import{ApolloClient,InMemoryCache,ApolloProvider,createHttpLink}from'@apollo/client';import{setContext}from'@apollo/client/link/context';import{BrowserRouter as Router,Routes,Route}from'react-router-dom';import Home from'./pages/Home';import Signup from'./pages/Signup';import Login from'./pages/Login';import Profile from'./pages/Profile';import Header from'./components/Header';import Footer from'./components/Footer';// Construct our main GraphQL API endpoint\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var httpLink=createHttpLink({uri:'/graphql'});// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nvar authLink=setContext(function(_,_ref){var headers=_ref.headers;// get the authentication token from local storage if it exists\nvar token=localStorage.getItem('id_token');// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"Bearer \".concat(token):''})};});var client=new ApolloClient({// Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\nlink:authLink.concat(httpLink),cache:new InMemoryCache()});function App(){useEffect(function(){addResponseMessage('Welcome to this awesome chat!');},[]);var handleNewUserMessage=function handleNewUserMessage(newMessage){console.log(\"New message incoming! \".concat(newMessage));addResponseMessage(response);};return/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(Widget,{handleNewUserMessage:handleNewUserMessage//profileAvatar={logo}\n,title:\"My new awesome title\",subtitle:\"And my cool subtitle\"}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Home,{})}),/*#__PURE__*/_jsx(Route,{path:\"/login\",element:/*#__PURE__*/_jsx(Login,{})}),/*#__PURE__*/_jsx(Route,{path:\"/signup\",element:/*#__PURE__*/_jsx(Signup,{})}),/*#__PURE__*/_jsx(Route,{path:\"/me\",element:/*#__PURE__*/_jsx(Profile,{})}),/*#__PURE__*/_jsx(Route,{path:\"/users/:id\",element:/*#__PURE__*/_jsx(Profile,{})})]}),/*#__PURE__*/_jsx(Footer,{})]})})});}export default App;","map":{"version":3,"names":["React","Widget","addResponseMessage","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","BrowserRouter","Router","Routes","Route","Home","Signup","Login","Profile","Header","Footer","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","App","useEffect","handleNewUserMessage","newMessage","console","log","response"],"sources":["C:/Users/belen/bootcamp/projects/live-chat/src/App.js"],"sourcesContent":["import React from 'react';\nimport { Widget, addResponseMessage } from 'react-chat-widget';\n\nimport 'react-chat-widget/lib/styles.css';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Signup from './pages/Signup';\nimport Login from './pages/Login';\nimport Profile from './pages/Profile';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  useEffect(() => {\n    addResponseMessage('Welcome to this awesome chat!');\n  }, []);\n  const handleNewUserMessage = (newMessage) => {\n    console.log(`New message incoming! ${newMessage}`);\n    addResponseMessage(response);\n  };\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Header />\n          <Widget \n          handleNewUserMessage={handleNewUserMessage}\n          //profileAvatar={logo}\n          title=\"My new awesome title\"\n          subtitle=\"And my cool subtitle\"\n          />\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/login\" element={<Login />} />\n            <Route path=\"/signup\" element={<Signup />} />\n            <Route path=\"/me\" element={<Profile />} />\n            <Route path=\"/users/:id\" element={<Profile />} />\n          </Routes>\n          <Footer />\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"+HAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,OAASC,MAAM,CAAEC,kBAAkB,KAAQ,mBAAmB,CAE9D,MAAO,kCAAkC,CAEzC,OACEC,YAAY,CACZC,aAAa,CACbC,cAAc,CACdC,cAAc,KACT,gBAAgB,CACvB,OAASC,UAAU,KAAQ,6BAA6B,CACxD,OAASC,aAAa,GAAIC,OAAM,CAAEC,MAAM,CAAEC,KAAK,KAAQ,kBAAkB,CAEzE,MAAOC,KAAI,KAAM,cAAc,CAC/B,MAAOC,OAAM,KAAM,gBAAgB,CACnC,MAAOC,MAAK,KAAM,eAAe,CACjC,MAAOC,QAAO,KAAM,iBAAiB,CACrC,MAAOC,OAAM,KAAM,qBAAqB,CACxC,MAAOC,OAAM,KAAM,qBAAqB,CAExC;AAAA,6IACA,GAAMC,SAAQ,CAAGZ,cAAc,CAAC,CAC9Ba,GAAG,CAAE,UACP,CAAC,CAAC,CAEF;AACA,GAAMC,SAAQ,CAAGb,UAAU,CAAC,SAACc,CAAC,MAAkB,IAAdC,QAAO,MAAPA,OAAO,CACvC;AACA,GAAMC,MAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAC9C;AACA,MAAO,CACLH,OAAO,gCACFA,OAAO,MACVI,aAAa,CAAEH,KAAK,kBAAaA,KAAK,EAAK,EAAE,EAEjD,CAAC,CACH,CAAC,CAAC,CAEF,GAAMI,OAAM,CAAG,GAAIxB,aAAY,CAAC,CAC9B;AACAyB,IAAI,CAAER,QAAQ,CAACS,MAAM,CAACX,QAAQ,CAAC,CAC/BY,KAAK,CAAE,GAAI1B,cAAa,EAC1B,CAAC,CAAC,CAEF,QAAS2B,IAAG,EAAG,CACbC,SAAS,CAAC,UAAM,CACd9B,kBAAkB,CAAC,+BAA+B,CAAC,CACrD,CAAC,CAAE,EAAE,CAAC,CACN,GAAM+B,qBAAoB,CAAG,QAAvBA,qBAAoB,CAAIC,UAAU,CAAK,CAC3CC,OAAO,CAACC,GAAG,iCAA0BF,UAAU,EAAG,CAClDhC,kBAAkB,CAACmC,QAAQ,CAAC,CAC9B,CAAC,CACD,mBACE,KAAC,cAAc,EAAC,MAAM,CAAEV,MAAO,uBAC7B,KAAC,MAAM,wBACL,wCACE,KAAC,MAAM,IAAG,cACV,KAAC,MAAM,EACP,oBAAoB,CAAEM,oBACtB;AAAA,CACA,KAAK,CAAC,sBAAsB,CAC5B,QAAQ,CAAC,sBAAsB,EAC7B,cACF,MAAC,MAAM,yBACL,KAAC,KAAK,EAAC,IAAI,CAAC,GAAG,CAAC,OAAO,cAAE,KAAC,IAAI,IAAI,EAAG,cACrC,KAAC,KAAK,EAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,cAAE,KAAC,KAAK,IAAI,EAAG,cAC3C,KAAC,KAAK,EAAC,IAAI,CAAC,SAAS,CAAC,OAAO,cAAE,KAAC,MAAM,IAAI,EAAG,cAC7C,KAAC,KAAK,EAAC,IAAI,CAAC,KAAK,CAAC,OAAO,cAAE,KAAC,OAAO,IAAI,EAAG,cAC1C,KAAC,KAAK,EAAC,IAAI,CAAC,YAAY,CAAC,OAAO,cAAE,KAAC,OAAO,IAAI,EAAG,GAC1C,cACT,KAAC,MAAM,IAAG,GACT,EACI,EACM,CAErB,CAEA,cAAeF,IAAG"},"metadata":{},"sourceType":"module"}